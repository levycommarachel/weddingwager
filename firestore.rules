rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read their own data, and admins can read anyone's data.
    // Users can be created by anyone (for signup), but only the user or an admin can update their own info.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow create: if request.auth != null;
      allow update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Bets can be read by any authenticated user.
    // Only admins can create, update, or resolve bets.
    match /bets/{betId} {
      allow read: if request.auth != null;
      // Only allow admin users to create/update/delete bets
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Wagers can be read by any authenticated user.
    // Users can only create wagers for themselves.
    // An admin can update a wager (for settlement payouts).
    match /wagers/{wagerId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true || (request.resource.data.keys().hasOnly(['parlayId', 'userId']) && request.auth.uid == request.resource.data.userId && get(/databases/$(database)/documents/parlays/$(request.resource.data.parlayId)).data.userId == request.auth.uid));
      allow delete: if false; // Wagers should not be deletable
    }

    // Users can read, write, and delete their own parlays.
    match /parlays/{parlayId} {
      allow read: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
  }
}
